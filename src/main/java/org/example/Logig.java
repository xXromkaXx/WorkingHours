package org.example;

import java.time.*;
import java.util.*;
import java.util.concurrent.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.json.JSONObject;

import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;


public class Logig extends TelegramLongPollingBot {

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private final Map<Long, ScheduledFuture<?>> reminderTasks = new ConcurrentHashMap<>();

    private static final Logger logger = LoggerFactory.getLogger(Logig.class);

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    public void loadRemindersFromDatabase() {
        String query = "SELECT chatid, reminder_hour, reminder_minute FROM users WHERE reminder_hour IS NOT NULL AND reminder_minute IS NOT NULL";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                long chatId = rs.getLong("chatid");
                int hour = rs.getInt("reminder_hour");
                int minute = rs.getInt("reminder_minute");
                scheduleDailyReminder(chatId, hour, minute);  // –ü–ª–∞–Ω—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            }

        } catch (SQLException e) {
            System.out.println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: " + e.getMessage());
        }
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    private void scheduleDailyReminder(long chatId, int hour, int minute) {
        String timezone = getUserTimezone(chatId);
        if (!ZoneId.getAvailableZoneIds().contains(timezone)) {
            timezone = "Europe/Warsaw"; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }
        if (reminderTasks.containsKey(chatId)) {
            reminderTasks.get(chatId).cancel(false);
            reminderTasks.remove(chatId);
        }
        long initialDelay = calculateInitialDelay(LocalTime.of(hour, minute), timezone);

        long period = TimeUnit.DAYS.toMillis(1);



        ScheduledFuture<?> task = scheduler.scheduleAtFixedRate(() -> sendDailyReminder(chatId),
                initialDelay, period, TimeUnit.MILLISECONDS);

        reminderTasks.put(chatId, task);
    }



    private long calculateInitialDelay(LocalTime targetTime, String timezone) {
        ZonedDateTime now = ZonedDateTime.now(ZoneId.of(timezone));
        ZonedDateTime nextReminder = now.withHour(targetTime.getHour()).withMinute(targetTime.getMinute()).withSecond(0);

        if (now.isAfter(nextReminder)) {
            nextReminder = nextReminder.plusDays(1);
        }

        return Duration.between(now, nextReminder).toMillis();
    }



    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    private void sendDailyReminder(long chatId) {
        String userName = getUserNameFromDatabase(chatId);  // –ú–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
        String message = ReminderMessageGenerator.getRandomMessage(userName);
        sendMessage(chatId, message);

    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ç–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    public void updateReminderTime(long chatId, int hour, int minute) {
        String updateQuery = "UPDATE users SET reminder_hour = ?, reminder_minute = ? WHERE chatid = ?";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {

            pstmt.setInt(1, hour);
            pstmt.setInt(2, minute);
            pstmt.setLong(3, chatId);
            pstmt.executeUpdate();

            sendMessage(chatId,"–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.");

            // –ü–µ—Ä–µ–ø–ª–∞–Ω–æ–≤—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            scheduleDailyReminder(chatId, hour, minute);

        } catch (SQLException e) {
            sendMessage(chatId,"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ");
        }
    }





    public enum SubState {
        NONE,
        ASK_MONTH,

        WAIT_FOR_HOURS,

        WAIT_FOR_HOURS_R
    }


    private enum State {
        START, reg, SavingName, AddWork, SavingWork, MAIN,ENTER_HOURS,SELECT_WORK_TO_VIEW,VIEW_WORK_HOURS,EDIT_WORK,MainMenuBackForLIST,editingHours
    ,reminderSetup,reminderHours,reminderMinutes,SET_TIMEZONE,WAITING_FOR_TIMEZONE,WAITING_FOR_CUSTOM_TIMEZONE, CONFIRM_DELETEWORK
        ,WAIT_FOR_HOURS_AFTER_DATE
    }


    private String selectedWork;

    private State currentState = State.START;
    private SubState currentSubState = SubState.NONE;


    private String userName;
    private Integer selectedMonth = null;
    private Integer selectedDay = null;
private Integer rHours=null;


    private String capitalizeFirstLetter(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }
        return input.substring(0, 1).toUpperCase() + input.substring(1).toLowerCase();
    }




    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            // –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è
            String[] data = update.getCallbackQuery().getData().split(":");
            if (data[0].equals("select_month")) {
                int month = Integer.parseInt(data[1]);
                String workName = data[2];
                long chatId = update.getCallbackQuery().getMessage().getChatId();
                handleMonthSelection(chatId, month, workName);
            }
           else if (data[0].equals("edit_day")) {
                int month = Integer.parseInt(data[1]);
                int day = Integer.parseInt(data[2]);
                String workName = data[3];
                long chatId = update.getCallbackQuery().getMessage().getChatId();
                handleDaySelection(chatId, month, day, workName);
            }
            else if (data[0].equals("select_date")) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É
                long chatId = update.getCallbackQuery().getMessage().getChatId(); // –û—Ç—Ä–∏–º—É—î–º–æ chatId –∑ callback
                sendCalendar(chatId); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            }

            else if (data[0].startsWith("date_selected")) {
                long chatId = update.getCallbackQuery().getMessage().getChatId();

                int selectedDate = Integer.parseInt(data[1]); // –û—Ç—Ä–∏–º—É—î–º–æ —á–∏—Å–ª–æ –¥–Ω—è
                selectedDay = selectedDate; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å

                sendMessage(chatId, "üìÜ –í–∏ –æ–±—Ä–∞–ª–∏ " + selectedDay + " —á–∏—Å–ª–æ. –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω:");
                currentState = State.WAIT_FOR_HOURS_AFTER_DATE; // –û—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≥–æ–¥–∏–Ω
            }


        } else if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            messageText = messageText.substring(0, 1).toUpperCase() + messageText.substring(1).toLowerCase();
            if (messageText.length() > 1) {
                messageText = capitalizeFirstLetter(messageText);
            }

            long chatId = update.getMessage().getChatId();

            // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
            if (messageText.equals("/start")) {
                if (!UserExists(chatId)) {
                    currentState = State.reg;
                } else {
                    currentState = State.MAIN;
                }
            }else if (messageText.equals("/settimezone")) {
                currentState = State.SET_TIMEZONE;
                sendTimezoneKeyboard(chatId);
            }



            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —Å—Ç–∞–Ω—ñ–≤
            handleState(update, chatId);
        }
    }



    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));

        message.setText(text);
        message.setParseMode("Markdown");
        try {
            execute(message);

       } catch (TelegramApiException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ Telegram API: {}", e.getMessage(), e);
}

    }


    private void sendMessageWithKeyboard(Long chatId, String text, ReplyKeyboardMarkup keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboardMarkup);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    public Boolean formatString(String input) {


        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ª–∏—à–µ –±—É–∫–≤ —ñ —Ü–∏—Ñ—Ä
        if (!input.matches("[a-zA-Z–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ“ë“ê0-9]+")) {
            return false;
        }
        return true;
    }

    private void handleState(Update update, long chatId) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
messageText=messageText.substring(0, 1).toUpperCase() + messageText.substring(1).toLowerCase();


            switch (currentState) {

                case reg:
                    sendMessage(chatId, "\uD83D\uDC4B –ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è. –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?");

                    currentState = State.SavingName;  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
                    break;
                case SavingName:
                    if (!update.hasMessage() || !update.getMessage().hasText()) {
                        sendMessage(chatId, "‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —Ç–µ–∫—Å—Ç–æ–º!");
                        return;
                    }
                    if (formatString(messageText)) {
                        userName = messageText;
                        addUser(chatId, userName);
                        sendMessage(chatId, "–ß—É–¥–æ–≤–æ," + userName + "! –¢–µ–ø–µ—Ä –º–æ–∂–µ—à –ø–æ—á–∞—Ç–∏ –≤–µ—Å—Ç–∏ —Å–≤—ñ–π —Ä–æ–±–æ—á–∏–π —á–∞—Å ‚è≥");
                        currentState = State.AddWork;
                    } else {
                        sendMessage(chatId, "‚ùå –û–π, —ñ–º'—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!");
                    }
                    break;

                case AddWork:


                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ä–æ–±–æ—Ç—É
                    if (getUserJobs(chatId).size() > 0) {
                        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É —Ä–æ–±–æ—Ç—É, —Ç–æ–º—É –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É

                        sendMessageWithKeyboard(chatId, "–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ:", createMainMenuBackKeyboard());

                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É, –¥–µ —î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" —ñ "–ù–∞–∑–∞–¥"

                        currentState = State.SavingWork;

                    } else  if (getUserJobs(chatId).size() == 0){
                        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –∂–æ–¥–Ω–æ—ó —Ä–æ–±–æ—Ç–∏, —Ç–æ–º—É –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏
                        sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Ä–æ–±–æ—Ç–∏:");

                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
                        currentState = State.SavingWork;
                    }
                    break;



                case SavingWork:
                    if (getUserJobs(chatId).size() >= 1){
                        if (messageText.equals("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é") || messageText.equals("–ù–∞–∑–∞–¥")) {
                        currentState = State.MAIN;
                        menuMain(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é");  // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                            return;
                    }
                        }
                    if (formatString(messageText)) {
                        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ä–æ–±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        if (workExists(chatId, messageText)) {
                            sendMessage(chatId,"–†–æ–±–æ—Ç–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤—É—é —É –≤–∞—Å –≤–∂–µ —î !!!");
                            currentState=State.AddWork;
                            handleState(update,chatId);
                            return;
                        }
                        else  if (messageText.equals("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é") || messageText.equals("–ù–∞–∑–∞–¥")) {
                            currentState = State.MAIN;
                            menuMain(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é");  // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

                        }
                        else {
                            addWork(chatId, messageText);
                            menuMain(chatId, "–†–æ–±–æ—Ç—É –¥–æ–¥–∞–Ω–æ, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:");
                            currentState = State.MAIN;

                        }
                    }
                    else
                    {
                        sendMessage(chatId,"–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏!");
                        currentState=State.AddWork;
                        handleState(update,chatId);
                    }

                    break;


case WAIT_FOR_HOURS_AFTER_DATE:

    if (!messageText.matches("\\d+")) {
        sendMessage(chatId, "‚ùå –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –≥–æ–¥–∏–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5).");
        return;
    }

    int hours3 = Integer.parseInt(messageText);
    addWorkHours2(chatId, selectedWork, selectedDay, hours3);



    break;

                case reminderSetup:



                    if (messageText.equals("–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å")) {

                        currentState = State.reminderHours;

                        currentSubState = SubState.WAIT_FOR_HOURS_R;
                        sendMessageWithKeyboard(chatId,"–í–≤–µ–¥—ñ—Ç—å –≥–æ–¥–∏–Ω—É –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (0-23):",createMainMenuDOWNLOADKeyboard()) ;
                         return;
                    } if (messageText.equals("–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")) {
                        deleteReminder(chatId);
                        currentState = State.MAIN;
                        menuMain(chatId, "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:");

                   return;
                    } if (messageText.equals("–ù–∞–∑–∞–¥")) {
                        currentState = State.MAIN;
                        menuMain(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:");
                        return;
                    }
                        sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π:");
                        break;



                case reminderHours:

                    if (messageText.equals("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")) {
                        currentState = State.MAIN;
                        menuMain(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é");  // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                        return;
                    } else if (messageText.equals("–°–∫–∞—Å—É–≤–∞—Ç–∏")) {
                        currentState = State.reminderSetup;

                        sendMessageWithKeyboard(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", createReminderKeyboard());

                        return;
                    } else if (getJobNamesForUser(chatId).contains(messageText)) {
                        selectedWork = messageText;
                        currentState = State.EDIT_WORK;
                        showSettingUpWorkMenu(chatId);  // –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ—ó –æ–±—Ä–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
                        return;
                    }

                    if (currentSubState == SubState.WAIT_FOR_HOURS_R) {
                        if (!messageText.matches("\\d+")|| Integer.parseInt(messageText) < 0 || Integer.parseInt(messageText) > 23) {
                            sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≥–æ–¥–∏–Ω–∏ (0-23).");
                            break;
                        }
                        int hours = Integer.parseInt(messageText);
                        if (hours >= 0 && hours <= 23) {
                            rHours = hours;
                            sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (0-59):");
                            currentState = State.reminderMinutes;
                            currentSubState = SubState.NONE;
                        } else {
                            sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –≥–æ–¥–∏–Ω—É (0-23).");
                        }
                    }
                    break;

                case reminderMinutes:
                    if (messageText.equals("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")) {
                        currentState = State.MAIN;
                        menuMain(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é");  // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                        return;
                    } else if (messageText.equals("–°–∫–∞—Å—É–≤–∞—Ç–∏")) {
                        currentState = State.reminderSetup;

                        sendMessageWithKeyboard(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", createReminderKeyboard());

                        return;
                    }
                    if (!messageText.matches("\\d+")) {
                        sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ö–≤–∏–ª–∏–Ω (0-59).");
                        break;
                    }
                    int minutes = Integer.parseInt(messageText);
                    if (minutes >= 0 && minutes <= 59) {
                        updateReminderTime(chatId, rHours, minutes);
                        sendMessage(chatId, "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ " + rHours + ":" + minutes);
                        currentState = State.MAIN;
                        menuMain(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:");
                    } else {
                        sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ö–≤–∏–ª–∏–Ω–∏ (0-59).");
                    }
                    break;










                case MAIN:


                    if (getJobNamesForUser(chatId).contains(messageText)) {
                        selectedWork = messageText;
                        currentState = State.EDIT_WORK;
                        currentSubState = SubState.NONE;
                        showSettingUpWorkMenu(chatId);
                        return;
                    } if (messageText.equals("–î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")) {
                        currentState = State.AddWork;
                        handleState(update, chatId);
                        return;  // –í–ê–ñ–õ–ò–í–û! –ó—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è handleState(), —â–æ–± –Ω–µ –ø—ñ—à–ª–æ –¥–∞–ª—ñ!

                    } if (messageText.equals("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")) {

                        currentState = State.reminderSetup;
                    showReminders(chatId);
                        sendMessageWithKeyboard(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", createReminderKeyboard());
                        return;  // –í–ê–ñ–õ–ò–í–û! –ó—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è handleState(), —â–æ–± –Ω–µ –ø—ñ—à–ª–æ –¥–∞–ª—ñ!

                    }
                    menuMain(chatId, "\"–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\"\n- –ù–∞–∑–≤–∞ —Ä–æ–±–æ—Ç–∏ ‚Äì –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è\n- –î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n");
            return;










                case EDIT_WORK:
                    switch (messageText) {
                        case "–î–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏":
                            currentState = State.ENTER_HOURS;
                            sendMessageWithBothKeyboards(chatId, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω:");
                            break;

                        case "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥/–º":
                            promptMonthSelection(chatId, selectedWork);
                            return;

                        case "–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–±–æ—Ç—É":
                            if(selectedWork !=null) {
//                            deleteJob(chatId, selectedWork);
//                            currentState = State.MAIN;
//                            menuMain(chatId, "–†–æ–±–æ—Ç—É \"" + selectedWork + "\" –≤–∏–¥–∞–ª–µ–Ω–æ.");
                                sendDeleteConfirmation(chatId, selectedWork);
                                currentState = State.CONFIRM_DELETEWORK;
                                return;
                            }else {
                                sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞:  —Ä–æ–±–æ—Ç—É –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ.");
                            }
                            break;


                        case "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏":

                            editWorkHours(chatId, selectedWork);
                            break;

                        case "–ù–∞–∑–∞–¥":
                            currentState = State.MAIN;
                            break;

                        default:
                            sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É.");
                            showSettingUpWorkMenu(chatId);
                            break;
                    }
                    break;



                default:
                    sendMessage(chatId, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    currentState = State.MAIN;
                    break;
                case ENTER_HOURS:
                    if (messageText.equals("–ù–∞–∑–∞–¥")) {
                        currentState = State.EDIT_WORK;
                        showSettingUpWorkMenu(chatId);  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
                        return;
                    }else if (!messageText.matches("\\d+")) {
                        sendMessage(chatId, "‚ùå –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –≥–æ–¥–∏–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5).");
                        return;
                    }
                    try {
                        int hours = Integer.parseInt(messageText); // –í–≤–æ–¥–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω
                        addWorkHours(chatId, selectedWork, hours);
                        currentState = State.MAIN;
                        handleState(update,chatId);
                    } catch (NumberFormatException e) {
                        sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω.");
                    }
                    break;

                case CONFIRM_DELETEWORK:
                    if (messageText.trim().contains("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏")) {
                        deleteJob(chatId, selectedWork);
                        sendMessage(chatId, "‚úÖ –†–æ–±–æ—Ç—É \"" + selectedWork + "\" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
                        currentState = State.MAIN;
                        menuMain(chatId, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:");
                    } else if (messageText.trim().contains("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")) {
                        sendMessage(chatId, "‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
                        currentState = State.EDIT_WORK;
                        showSettingUpWorkMenu(chatId);
                    }
                    else  {sendMessage(chatId, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                        currentState = State.EDIT_WORK;
                        showSettingUpWorkMenu(chatId);  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
                        return;}

                    break;


                case SELECT_WORK_TO_VIEW:

                        currentState = State.VIEW_WORK_HOURS;
                        handleState(update, chatId);
                   break;

                case VIEW_WORK_HOURS:
                    List<String> hoursData = getWorkHoursData(chatId, selectedWork);
                    if (hoursData.isEmpty()) {
                        sendMessage(chatId, "–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∏: " + selectedWork);

                    } else {
                        sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –≥–æ–¥–∏–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∏ " + selectedWork + ":\n" + String.join("\n", hoursData));

                    }
                    sendMessageWithKeyboard (chatId, "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ:", createMainMenuBackKeyboard());
                    currentState=State.MainMenuBackForLIST;

                    break;

                case MainMenuBackForLIST:
                    if (messageText.equals("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")) {
                        currentState = State.MAIN;
                        menuMain(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é");  // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                    } else if (messageText.equals("–ù–∞–∑–∞–¥")) {
                        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
                        currentState = State.EDIT_WORK;
                        showSettingUpWorkMenu(chatId);  // –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
                    } else if (getJobNamesForUser(chatId).contains(messageText)) {
                        selectedWork = messageText;
                        currentState = State.EDIT_WORK;
                        showSettingUpWorkMenu(chatId);  // –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ—ó –æ–±—Ä–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
                    }
                    break;




                case editingHours:
                    if ("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é".equals(messageText)) {
                        // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é

                        currentState = State.MAIN;
                        currentSubState = SubState.NONE;

                        handleState(update, chatId);
                        return;
                    } else if ("–°–∫–∞—Å—É–≤–∞—Ç–∏".equals(messageText)) {
                        currentState = State.EDIT_WORK;
                        currentSubState = SubState.NONE;
                        showSettingUpWorkMenu(chatId);  // –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
                        return;
                    } else if (getJobNamesForUser(chatId).contains(messageText)) {
                        selectedWork = messageText;
                        currentState = State.EDIT_WORK;
                        currentSubState = SubState.NONE;
                        showSettingUpWorkMenu(chatId);  // –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ—ó –æ–±—Ä–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
                        return;
                    }
// –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—Å—Ç–∞–Ω—É
                    switch (currentSubState) {




                        case WAIT_FOR_HOURS:
                            if (messageText.equals("–ù–∞–∑–∞–¥")) {
                                currentState = State.EDIT_WORK;
                                showSettingUpWorkMenu(chatId);  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
                                return;
                            }
                            try {
                                int hours = Integer.parseInt(messageText);
                                editingHoursWork(chatId, selectedWork, selectedMonth, selectedDay, hours);

                                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
                                currentState = State.MAIN;
                                currentSubState = SubState.NONE;
                                selectedMonth = null;
                                selectedDay = null;
                                handleState(update, chatId);
                            } catch (NumberFormatException e) {
                                sendMessageWithKeyboard(chatId, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≥–æ–¥–∏–Ω.", createMainMenuBackKeyboard());
                            }
                            break;

                        default:
                            currentSubState = SubState.ASK_MONTH;
                            break;
                    }
                    break;
                case SET_TIMEZONE:
                    sendTimezoneKeyboard(chatId); // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∏–±–æ—Ä–æ–º
                    currentState = State.WAITING_FOR_TIMEZONE; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                    break;
                case WAITING_FOR_TIMEZONE:
                    String selectedTimezone =formatTimezone( messageText.trim());

                    // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–Ü–Ω—à–∏–π..."
                    if (selectedTimezone.equals("üè≥ –Ü–Ω—à–∏–π... (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É)")) {
                        sendMessage(chatId, "‚úç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `Europe/Paris`):");
                        currentState = State.WAITING_FOR_CUSTOM_TIMEZONE;
                        return;
                    }

                    // –í–∏—Ç—è–≥—É—î–º–æ –ª–∏—à–µ –Ω–∞–∑–≤—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É (–±–µ–∑ –ø—Ä–∞–ø–æ—Ä—Ü—è)
                    selectedTimezone =formatTimezone( selectedTimezone.replaceAll("^[^a-zA-Z]+", "").trim());

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—è—Å –≤–∞–ª—ñ–¥–Ω–∏–π
                    if (!ZoneId.getAvailableZoneIds().contains(selectedTimezone)) {
                        sendMessage(chatId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `Europe/Kyiv`, `America/New_York` —Ç–æ—â–æ.");
                        return;
                    }

                    updateUserTimezone(chatId, selectedTimezone);


                    currentState = State.MAIN; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:
                    menuMain(chatId, "\"–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\"\n- –ù–∞–∑–≤–∞ —Ä–æ–±–æ—Ç–∏ ‚Äì –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è\n- –î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n");
                    break;


                case WAITING_FOR_CUSTOM_TIMEZONE: // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –ø–æ—è—Å –≤—Ä—É—á–Ω—É
                    selectedTimezone = formatTimezone(messageText.trim());

                    if (!ZoneId.getAvailableZoneIds().contains(selectedTimezone)) {
                        sendMessage(chatId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `Europe/Kyiv`, `America/New_York` —Ç–æ—â–æ.");
                        return;
                    }
                    updateUserTimezone(chatId, selectedTimezone);
                    currentState = State.MAIN;
                    menuMain(chatId, "‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + selectedTimezone + "\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:");
                    break;

            }
        }


    }





    public List<String> getUserJobs(Long chatId) {
        List<String> jobs = new ArrayList<>();
        String query = "SELECT work_name FROM work_types WHERE chatid = ?";

        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setLong(1, chatId);

            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    jobs.add(resultSet.getString("work_name"));
                }
            }
       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}


        return jobs;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    public boolean UserExists(Long chatId) {
        String sql = "SELECT COUNT(*) FROM users WHERE chatid = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement statement = conn.prepareStatement(sql)) {

            statement.setLong(1, chatId);
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                return resultSet.getInt(1) > 0; // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª—å—à–∞ –∑–∞ 0, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
            }

       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}


        return false;
    }


    public static void addUser(Long userId, String name) {
        String sql = "INSERT INTO users (chatid, username) VALUES (?, ?) ON CONFLICT (chatid) DO NOTHING";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, userId);
            pstmt.setString(2, name);
            pstmt.executeUpdate();
            System.out.println("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.");
        } catch (SQLException e) {
            System.out.println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + e.getMessage());
        }
    }



    public void addWork(Long chatId, String workName) {

        LocalDate currentDate = LocalDate.now();

        int currentMonth = currentDate.getMonthValue();


        // SQL-–∑–∞–ø–∏—Ç–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        String insertWorkTypeSql = """
            INSERT INTO work_types (chatid, work_name)
            VALUES (?, ?)
            ON CONFLICT (chatid, work_name) DO NOTHING
            """;

            String insertWorkHoursSql = """
            INSERT INTO work_hours (chatid, work_id, month, work_data)
            SELECT ?, wt.work_id, ?, '{}'
            FROM work_types wt
            WHERE wt.chatid = ? AND wt.work_name = ?
            AND NOT EXISTS (
                SELECT 1 FROM work_hours wh
                WHERE wh.chatid = ? AND wh.work_id = wt.work_id
            )
            """;

        try (Connection conn = DatabaseConnection.getConnection()) {
            // –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—Ç–∞–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—é work_types
            try (PreparedStatement pstmtWorkType = conn.prepareStatement(insertWorkTypeSql)) {
                pstmtWorkType.setLong(1, chatId);
                pstmtWorkType.setString(2, workName);
                pstmtWorkType.executeUpdate();
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—Ç–∞–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—é work_hours
            try (PreparedStatement pstmtWorkHours = conn.prepareStatement(insertWorkHoursSql)) {
                pstmtWorkHours.setLong(1, chatId);
                pstmtWorkHours.setLong(2, currentMonth );
                pstmtWorkHours.setLong(3, chatId);
                pstmtWorkHours.setString(4, workName);
                pstmtWorkHours.setLong(5, chatId);
                pstmtWorkHours.executeUpdate();
            }


       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}



    }

    private boolean workExists(Long chatId, String workName) {
        String sql = """
                SELECT j.work_id 
                FROM work_types j
                JOIN work_hours wl ON j.work_id = wl.work_id
                WHERE wl.chatid = ? AND j.work_name = ?
                """;

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, chatId);
            pstmt.setString(2, workName);

            ResultSet rs = pstmt.executeQuery();
            return rs.next(); // –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –∑–∞–ø–∏—Å —ñ—Å–Ω—É—î
       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}

        return false;
    }








    private void addWorkHours(Long chatId, String workName, int hours) {
        String selectSql = """
        SELECT work_data FROM work_hours 
        WHERE chatid = ? 
        AND work_id = (SELECT work_id FROM work_types WHERE work_name = ?) 
        AND month = ?
    """;

        String insertSql = """
        INSERT INTO work_hours (chatid, work_id, month, work_data)
        VALUES (?, (SELECT work_id FROM work_types WHERE work_name = ?), ?, ?::jsonb)
    """;

        String updateSql = """
        UPDATE work_hours 
        SET work_data = work_data || ?::jsonb
        WHERE chatid = ? 
        AND work_id = (SELECT work_id FROM work_types WHERE work_name = ?) 
        AND month = ?
    """;

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —Ç–∞ –º—ñ—Å—è—Ü—å
        LocalDate currentDate = LocalDate.now();
        int dayOfMonth = currentDate.getDayOfMonth();
        int currentMonth = currentDate.getMonthValue();

        // –°—Ç–≤–æ—Ä—é—î–º–æ JSON –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è
        String dayDataJson = "{\"" + dayOfMonth + "\": " + hours + "}";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement selectStmt = conn.prepareStatement(selectSql);
             PreparedStatement insertStmt = conn.prepareStatement(insertSql);
             PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ chatId, work_id, —Ç–∞ –º—ñ—Å—è—Ü—è
            selectStmt.setLong(1, chatId);
            selectStmt.setString(2, workName);
            selectStmt.setInt(3, currentMonth);

            try (ResultSet rs = selectStmt.executeQuery()) {
                if (rs.next()) {
                    // –Ø–∫—â–æ –∑–∞–ø–∏—Å —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ, –¥–æ–¥–∞—é—á–∏ –Ω–æ–≤–∏–π –¥–µ–Ω—å —É JSON
                    updateStmt.setString(1, dayDataJson);
                    updateStmt.setLong(2, chatId);
                    updateStmt.setString(3, workName);
                    updateStmt.setInt(4, currentMonth);
                    updateStmt.executeUpdate();
                } else {
                    // –Ø–∫—â–æ –∑–∞–ø–∏—Å—É –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –∑ –ø–æ—Ç–æ—á–Ω–∏–º –º—ñ—Å—è—Ü–µ–º —ñ –¥–Ω—è–º–∏
                    insertStmt.setLong(1, chatId);
                    insertStmt.setString(2, workName);
                    insertStmt.setInt(3, currentMonth);
                    insertStmt.setString(4, dayDataJson);
                    insertStmt.executeUpdate();
                }
            }

            sendMessage(chatId, "–ì–æ–¥–∏–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏: " + workName +
                    " –¥–ª—è –¥–Ω—è " + dayOfMonth + " –º—ñ—Å—è—Ü—è " + currentMonth);

        } catch (SQLException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
        }

    }


    private void editingHoursWork(Long chatId, String workName, int month, int day, int hours) {
        String selectSql = """
        SELECT work_data FROM work_hours 
        WHERE chatid = ? 
        AND work_id = (SELECT work_id FROM work_types WHERE work_name = ?) 
        AND month = ?
    """;

        String insertSql = """
        INSERT INTO work_hours (chatid, work_id, month, work_data)
        VALUES (?, (SELECT work_id FROM work_types WHERE work_name = ?), ?, ?::jsonb)
    """;

        String updateSql = """
        UPDATE work_hours 
        SET work_data = work_data || ?::jsonb
        WHERE chatid = ? 
        AND work_id = (SELECT work_id FROM work_types WHERE work_name = ?) 
        AND month = ?
    """;




        // –°—Ç–≤–æ—Ä—é—î–º–æ JSON –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è
        String dayDataJson = "{\"" + day + "\": " + hours + "}";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement selectStmt = conn.prepareStatement(selectSql);
             PreparedStatement insertStmt = conn.prepareStatement(insertSql);
             PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ chatId, work_id, —Ç–∞ –º—ñ—Å—è—Ü—è
            selectStmt.setLong(1, chatId);
            selectStmt.setString(2, workName);
            selectStmt.setInt(3, month);

            ResultSet rs = selectStmt.executeQuery();

            if (rs.next()) {
                // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞—è–≤–Ω–∏–π JSON –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
                String workData = rs.getString("work_data");

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å JSON –∑–∞–ø–∏—Å –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –¥–Ω—è
                if (workData.contains("\"" + day + "\":")) {
                    // –Ø–∫—â–æ –¥–µ–Ω—å –≤–∂–µ —î –≤ JSON, –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å
                    updateStmt.setString(1, dayDataJson);
                    updateStmt.setLong(2, chatId);
                    updateStmt.setString(3, workName);
                    updateStmt.setInt(4, month);
                    updateStmt.executeUpdate();

                    sendMessage(chatId, "–ì–æ–¥–∏–Ω–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.");
                } else {
                    // –Ø–∫—â–æ –¥–Ω—è –Ω–µ–º–∞—î –≤ JSON, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    sendMessage(chatId, "–ó–∞–ø–∏—Å—É –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–º–∞—î. –î–æ–¥–∞–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è.");
                }
            } else {
                // –Ø–∫—â–æ –∑–∞–ø–∏—Å—É –¥–ª—è –º—ñ—Å—è—Ü—è –≤–∑–∞–≥–∞–ª—ñ –Ω–µ–º–∞—î, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                sendMessage(chatId, "–ó–∞–ø–∏—Å—É –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è –Ω–µ–º–∞—î. –î–æ–¥–∞–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è.");
            }

        } catch (SQLException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
            sendMessage(chatId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω.");
        }
    }





    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤ —Ä–æ–±—ñ—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    public List<String> getJobNamesForUser(Long chatId) {
        List<String> jobNames = new ArrayList<>();
        String sql = """
        SELECT DISTINCT work_types.work_name
        FROM work_types
        JOIN work_hours ON work_types.work_id = work_hours.work_id
        WHERE work_hours.chatid = ?
    """;

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement statement = conn.prepareStatement(sql)) {

            statement.setLong(1, chatId);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                jobNames.add(resultSet.getString("work_name"));
            }

       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}


        return jobNames;
    }





    private void menuMain(Long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();
        for (String job : getJobNamesForUser(chatId)) {
            KeyboardRow row = new KeyboardRow();
            row.add(new KeyboardButton(job));
            keyboardRows.add(row);
        }

        KeyboardRow addWorkRow = new KeyboardRow();
        addWorkRow.add(new KeyboardButton("–î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"));
        addWorkRow.add(new KeyboardButton("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"));
        keyboardRows.add(addWorkRow);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞  {}", e.getMessage(), e);
        }
    }
    private void addWorkHours2(Long chatId, String workName, int day, int hours) {
        String selectSql = """
        SELECT work_data FROM work_hours 
        WHERE chatid = ? 
        AND work_id = (SELECT work_id FROM work_types WHERE work_name = ?) 
        AND month = ?
    """;

        String insertSql = """
        INSERT INTO work_hours (chatid, work_id, month, work_data)
        VALUES (?, (SELECT work_id FROM work_types WHERE work_name = ?), ?, ?::jsonb)
    """;

        String updateSql = """
        UPDATE work_hours 
        SET work_data = work_data || ?::jsonb
        WHERE chatid = ? 
        AND work_id = (SELECT work_id FROM work_types WHERE work_name = ?) 
        AND month = ?
    """;

        int currentMonth = LocalDate.now().getMonthValue(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å

        // –°—Ç–≤–æ—Ä—é—î–º–æ JSON –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è
        String dayDataJson = "{\"" + day + "\": " + hours + "}";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement selectStmt = conn.prepareStatement(selectSql);
             PreparedStatement insertStmt = conn.prepareStatement(insertSql);
             PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
            selectStmt.setLong(1, chatId);
            selectStmt.setString(2, workName);
            selectStmt.setInt(3, currentMonth);

            try (ResultSet rs = selectStmt.executeQuery()) {
                if (rs.next()) {
                    // –Ø–∫—â–æ –∑–∞–ø–∏—Å —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
                    updateStmt.setString(1, dayDataJson);
                    updateStmt.setLong(2, chatId);
                    updateStmt.setString(3, workName);
                    updateStmt.setInt(4, currentMonth);
                    updateStmt.executeUpdate();
                } else {
                    // –Ø–∫—â–æ –∑–∞–ø–∏—Å—É –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
                    insertStmt.setLong(1, chatId);
                    insertStmt.setString(2, workName);
                    insertStmt.setInt(3, currentMonth);
                    insertStmt.setString(4, dayDataJson);
                    insertStmt.executeUpdate();
                }
            }
currentState=State.MAIN ;
            sendMessage(chatId, "‚úÖ –ì–æ–¥–∏–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏: " + workName +
                    " –Ω–∞ " + day + " —á–∏—Å–ª–æ –º—ñ—Å—è—Ü—è " + currentMonth);

        } catch (SQLException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
        }
    }

    private void sendMessageWithBothKeyboards(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setParseMode("Markdown");

        // –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É (–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é / –ù–∞–∑–∞–¥)
        ReplyKeyboardMarkup mainKeyboard = createMainMenuBackKeyboard();
        message.setReplyMarkup(mainKeyboard);

        try {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            Message sentMessage = execute(message);
            int messageId = sentMessage.getMessageId();

            // –°—Ç–≤–æ—Ä—é—î–º–æ inline-–∫–Ω–æ–ø–∫—É "üìÖ –í–∏–±—Ä–∞—Ç–∏ –¥–µ–Ω—å"
            InlineKeyboardMarkup inlineKeyboard = createSelectDateKeyboard();

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ inline-–∫–Ω–æ–ø–∫—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            SendMessage inlineMessage = new SendMessage();
            inlineMessage.setChatId(String.valueOf(chatId));
            inlineMessage.setText("üìÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –≤–∏–±—Ä–∞—Ç–∏ –¥–µ–Ω—å:");
            inlineMessage.setReplyMarkup(inlineKeyboard);
            execute(inlineMessage);

        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void sendCalendar(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üìÜ –í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:");
        message.setReplyMarkup(createCalendarKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private InlineKeyboardMarkup createSelectDateKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton selectDateButton = new InlineKeyboardButton("üìÖ –í–∏–±—Ä–∞—Ç–∏ –¥–∞—Ç—É");
        selectDateButton.setCallbackData("select_date");

        rows.add(Collections.singletonList(selectDateButton));
        keyboard.setKeyboard(rows);

        return keyboard;
    }

    private InlineKeyboardMarkup createCalendarKeyboard() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        YearMonth currentMonth = YearMonth.now();
        int daysInMonth = currentMonth.lengthOfMonth();

        List<InlineKeyboardButton> row = new ArrayList<>();
        for (int day = 1; day <= daysInMonth; day++) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(String.valueOf(day));
            button.setCallbackData("date_selected:" + day);

            row.add(button);

            if (row.size() == 7) { // –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –∫–æ–∂–Ω—ñ 7 –¥–Ω—ñ–≤
                rows.add(new ArrayList<>(row));
                row.clear();
            }
        }
        if (!row.isEmpty()) {
            rows.add(row);
        }

        inlineKeyboardMarkup.setKeyboard(rows);
        return inlineKeyboardMarkup;
    }

    private ReplyKeyboardMarkup createMainMenuBackKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);



        KeyboardRow mainRow = new KeyboardRow();
        mainRow.add(new KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"));

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("–ù–∞–∑–∞–¥"));

        keyboardMarkup.setKeyboard(List.of(mainRow, backRow));

        return keyboardMarkup;
    }




    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
    private void showSettingUpWorkMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏: " );

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow  AddHoursRow = new KeyboardRow();
        AddHoursRow.add(new KeyboardButton("–î–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏"));

        KeyboardRow ListHours = new KeyboardRow();
        ListHours.add(new KeyboardButton("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥/–º"));


        KeyboardRow EditHoursANDDeleteJob =new KeyboardRow();
        EditHoursANDDeleteJob.add(new KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏"));
        EditHoursANDDeleteJob.add(new KeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–±–æ—Ç—É"));

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("–ù–∞–∑–∞–¥"));

        keyboardRows.add(AddHoursRow);
        keyboardRows.add(ListHours);
        keyboardRows.add(EditHoursANDDeleteJob);
        keyboardRows.add(backRow);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞  –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ {}", e.getMessage(), e);        }
    }


    private void sendDeleteConfirmation(long chatId, String workName) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("‚ö† –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–±–æ—Ç—É \"" + workName + "\"?");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);
        KeyboardRow confirmRow = new KeyboardRow();
        confirmRow.add(new KeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏"));
        confirmRow.add(new KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"));

        keyboardMarkup.setKeyboard(List.of(confirmRow));

        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {

        }
    }



    private List<String> getWorkHoursData(long chatId, String workName) {
        List<String> hoursData = new ArrayList<>();
        String sql = """
            SELECT work_data
            FROM work_hours
            JOIN work_types ON work_hours.work_id = work_types.work_id
            WHERE work_hours.chatid = ? AND work_types.work_name = ?
            """;

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, chatId);
            pstmt.setString(2, workName);

            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                String workDataJson = rs.getString("work_data");
                hoursData = parseWorkData(workDataJson);  // –†–æ–∑–ø–∞—Ä—Å–∏–º–æ JSON-–¥–∞–Ω—ñ
            }
       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}

        return hoursData;
    }
    private List<String> parseWorkData(String workDataJson) {
        List<String> hoursData = new ArrayList<>();

        try {
            JSONObject jsonObject = new JSONObject(workDataJson);
            Map<Integer, Integer> sortedWorkData = new TreeMap<>();

            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –¥–Ω—ñ —Ç–∞ —ó—Ö–Ω—ñ –≥–æ–¥–∏–Ω–∏ —É TreeMap (–≤—ñ–Ω —Å–æ—Ä—Ç—É—î —ó—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
            for (String key : jsonObject.keySet()) {
                sortedWorkData.put(Integer.parseInt(key), jsonObject.getInt(key));
            }

            // –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
            for (Map.Entry<Integer, Integer> entry : sortedWorkData.entrySet()) {
                hoursData.add("üìÖ –î–µ–Ω—å: " + entry.getKey() + " | ‚è≥ –ì–æ–¥–∏–Ω–∏: " + entry.getValue());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return hoursData;
    }



    public boolean deleteJob(Long chatId, String workName) {
        String selectWorkIdSQL = "SELECT work_id FROM work_types WHERE chatid = ? AND work_name = ?";
        String deleteFromWorkHoursSQL = "DELETE FROM work_hours WHERE work_id = ?";
        String deleteFromWorkTypesSQL = "DELETE FROM work_types WHERE work_id = ?";

        try (Connection conn = DatabaseConnection.getConnection()) {
            // –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º—É—î–º–æ work_id –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —Ç–∞ chatId
            int workId;
            try (PreparedStatement selectStmt = conn.prepareStatement(selectWorkIdSQL)) {
                selectStmt.setLong(1, chatId);
                selectStmt.setString(2, workName);
                ResultSet rs = selectStmt.executeQuery();

                if (!rs.next()) {
                    return false; // –†–æ–±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ chatId —Ç–∞ workName
                }
                workId = rs.getInt("work_id");
            }

            // –ö—Ä–æ–∫ 2: –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ work_hours –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º work_id
            try (PreparedStatement deleteHoursStmt = conn.prepareStatement(deleteFromWorkHoursSQL)) {
                deleteHoursStmt.setInt(1, workId);
                deleteHoursStmt.executeUpdate();
            }

            // –ö—Ä–æ–∫ 3: –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—ñ work_types –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º work_id
            try (PreparedStatement deleteWorkStmt = conn.prepareStatement(deleteFromWorkTypesSQL)) {
                deleteWorkStmt.setInt(1, workId);
                deleteWorkStmt.executeUpdate();
            }

            return true; // –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ

        } catch (SQLException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
            return false; // –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É
        }
    }




    //–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    public void deleteReminder(long chatId) {
        String deleteQuery = "UPDATE users SET reminder_hour = NULL, reminder_minute = NULL WHERE chatid = ?";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(deleteQuery)) {

            pstmt.setLong(1, chatId);
            pstmt.executeUpdate();
            sendMessage(chatId, "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.");

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —ñ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
            if (reminderTasks.containsKey(chatId)) {
                reminderTasks.get(chatId).cancel(false);
                reminderTasks.remove(chatId);

            }

        } catch (SQLException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
            sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.");

        }
    }

    private ReplyKeyboardMarkup createReminderKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        keyboardMarkup.setSelective(false);

        KeyboardRow mainRow = new KeyboardRow();
        mainRow.add(new KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å"));
        mainRow.add(new KeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"));


        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("–ù–∞–∑–∞–¥"));

        keyboardMarkup.setKeyboard(List.of(mainRow, backRow));

        return keyboardMarkup;
    }


    // –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –º—ñ—Å—è—Ü—è–º–∏
    private InlineKeyboardMarkup createMonthSelectionKeyboard(String workName) {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        String[] months = {"–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
                "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"};

        for (int i = 0; i < months.length; i += 3) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            for (int j = i; j < i + 3 && j < months.length; j++) {
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(months[j]);
                button.setCallbackData("select_month:" + (j + 1) + ":" + workName);
                row.add(button);
            }
            rowsInline.add(row);
        }

        inlineKeyboardMarkup.setKeyboard(rowsInline);
        return inlineKeyboardMarkup;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∏–∫–ª–∏–∫—É –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è
    private void promptMonthSelection(long chatId, String workName) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≥–æ–¥–∏–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∏: " + workName);
        message.setReplyMarkup(createMonthSelectionKeyboard(workName));
        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞  {}", e.getMessage(), e);
        }
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
    private void handleMonthSelection(long chatId, int month, String workName) {
        List<String> hoursData = getWorkHoursDataForMonth(chatId, workName, month);
        int totalHours = calculateTotalHours(hoursData);

        StringBuilder message = new StringBuilder();
        message.append("üìÖ *–ú—ñ—Å—è—Ü—å:* ").append(getMonthName(month)).append("\n");
        message.append("‚è≥ *–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω:* ").append(totalHours).append("\n\n");

        for (String dayData : hoursData) {
            message.append(dayData).append("\n");
        }

        sendMessage(chatId, message.toString());
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ –≥–æ–¥–∏–Ω–∞—Ö –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –º—ñ—Å—è—Ü—å
    private List<String> getWorkHoursDataForMonth(long chatId, String workName, int month) {
        List<String> hoursData = new ArrayList<>();
        String sql = """
            SELECT work_data
            FROM work_hours
            JOIN work_types ON work_hours.work_id = work_types.work_id
            WHERE work_hours.chatid = ? AND work_types.work_name = ? AND work_hours.month = ?
            """;

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, chatId);
            pstmt.setString(2, workName);
            pstmt.setInt(3, month);

            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                String workDataJson = rs.getString("work_data");
                JSONObject jsonObject = new JSONObject(workDataJson);
                for (String day : jsonObject.keySet()) {
                    int hours = jsonObject.getInt(day);
                    hoursData.add("üìÖ –î–µ–Ω—å: " + day + " | ‚è≥ –ì–æ–¥–∏–Ω–∏: " + hours);
                }
            }
       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}

        return hoursData;
    }

    // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ–¥–∏–Ω
    private int calculateTotalHours(List<String> hoursData) {
        return hoursData.stream()
                .mapToInt(data -> Integer.parseInt(data.replaceAll(".*–ì–æ–¥–∏–Ω–∏: (\\d+)", "$1")))
                .sum();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º—ñ—Å—è—Ü—è
    private String getMonthName(int month) {
        String[] months = {"–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
                "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"};
        return months[month - 1];
    }







    //—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥–æ–¥–∏–Ω
    private void editWorkHours(long chatId, String workName) {
        int currentMonth = LocalDate.now().getMonthValue();
        List<String> daysWithHours = getWorkHoursForEditing(chatId, workName, currentMonth);

        if (daysWithHours.isEmpty()) {
            sendMessage(chatId, "–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å. –í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å, —â–æ–± –¥–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏.");
        }

        sendInlineDaysKeyboard(chatId, workName, currentMonth, daysWithHours);
    }

    private void sendInlineDaysKeyboard(long chatId, String workName, int month, List<String> daysWithHours) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (String dayData : daysWithHours) {
            String[] parts = dayData.split(":");
            String dayDO = parts[0].replaceAll("\\D+", ""); // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ, –æ–∫—Ä—ñ–º —á–∏—Å–µ–ª
            String hours = parts.length > 1 ? parts[1] : "0";
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤ —á–∏—Å–ª—ñ –±—ñ–ª—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 100
           String day= splitTime(dayDO);
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("–î–µ–Ω—å " + day + " (" +hours + " –≥–æ–¥)");

            button.setCallbackData("edit_day:" + month + ":" + day + ":" + workName); // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –¥–Ω—è

            rows.add(List.of(button));
        }

        markup.setKeyboard(rows);
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:");
        message.setReplyMarkup(markup);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–Ω—è
    private void handleDaySelection(long chatId, int month, int day, String workName) {

        int existingHours = getHoursForDay(chatId, workName, month, day);
        sendMessage(chatId, "–ù–∞ –¥–µ–Ω—å " + day + " –≤–∂–µ –≤–Ω–µ—Å–µ–Ω–æ " + existingHours + " –≥–æ–¥–∏–Ω. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'.");
        currentState = State.editingHours;
        currentSubState=SubState.WAIT_FOR_HOURS;
        selectedMonth = month;
        selectedDay = day;
        selectedWork = workName;
    }

    private int getHoursForDay(long chatId, String workName, int month, int day) {
        String sql = "SELECT work_data FROM work_hours JOIN work_types ON work_hours.work_id = work_types.work_id WHERE work_hours.chatid = ? AND work_types.work_name = ? AND work_hours.month = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, chatId);
            pstmt.setString(2, workName);
            pstmt.setInt(3, month);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                JSONObject jsonObject = new JSONObject(rs.getString("work_data"));
                return jsonObject.optInt(String.valueOf(day), 0);
            }
       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}

        return 0;
    }




    private List<String> getWorkHoursForEditing(long chatId, String workName, int month) {
        List<String> hoursData = new ArrayList<>();
        String sql = """
        SELECT work_data
        FROM work_hours
        JOIN work_types ON work_hours.work_id = work_types.work_id
        WHERE work_hours.chatid = ? AND work_types.work_name = ? AND work_hours.month = ?
        """;

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, chatId);
            pstmt.setString(2, workName);
            pstmt.setInt(3, month);

            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                String workDataJson = rs.getString("work_data");

                // –ü–∞—Ä—Å–∏–º–æ JSON –æ–±'—î–∫—Ç
                JSONObject jsonObject = new JSONObject(workDataJson);
                for (String key : jsonObject.keySet()) {

                        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á —É —á–∏—Å–ª–æ (–¥–µ–Ω—å)
                        int day = Integer.parseInt(key);
                        // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω)
                        int hours = jsonObject.getInt(key);

                        // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–≤—ñ–¥
                        hoursData.add(" " + day + " " + hours);

                        System.out.println(" " + day + " " + hours);

                }
            }
       } catch (SQLException e) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
}

        return hoursData;
    }

        public static String splitTime(String day2) {
            int day = Integer.parseInt(day2);
        String result = "";

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —á–∏—Å–ª–æ –º–∞—î 4 —Ü–∏—Ñ—Ä–∏
            if (day >= 1000) {
                int days = day / 100; // –ü–µ—Ä—à—ñ –¥–≤—ñ —Ü–∏—Ñ—Ä–∏ ‚Äî —Ü–µ –¥–Ω—ñ

                result = days+"" ;
            }
            // –Ø–∫—â–æ —á–∏—Å–ª–æ –º–∞—î 3 —Ü–∏—Ñ—Ä–∏
            else if (day >= 100) {
                int days = day / 100; // –ü–µ—Ä—à–∞ —Ü–∏—Ñ—Ä–∞ ‚Äî —Ü–µ –¥–Ω—ñ

                result = days+"" ;
            }


            return result;
        }






    private ReplyKeyboardMarkup createMainMenuDOWNLOADKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        KeyboardRow mainRow = new KeyboardRow();
        mainRow.add(new KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"));

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏"));

        keyboardMarkup.setKeyboard(List.of(mainRow, backRow));

        return keyboardMarkup;
    }






    //—Ç–∞–π–º –∑–æ–Ω–∞
    public void updateUserTimezone(long chatId, String timezone) {
        String query = "UPDATE users SET timezone = ? WHERE chatid = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, timezone);
            pstmt.setLong(2, chatId);
            pstmt.executeUpdate();
            sendMessage(chatId, "‚úÖ –í–∞—à —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: `" + timezone + "`");
        } catch (SQLException e) {
            sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É.");
        }
    }

    private void sendTimezoneKeyboard(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üåç –í–∏–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –†—è–¥–∫–∏ –∫–Ω–æ–ø–æ–∫
        keyboardRows.add(createRow("üá∫üá¶ Europe/Kyiv", "üáµüá± Europe/Warsaw"));
        keyboardRows.add(createRow("üá∑üá∫ Europe/Moscow", "üáπüá∑ Europe/Istanbul"));
        keyboardRows.add(createRow("üá∫üá∏ America/New_York", "üá©üá™ Europe/Berlin"));
        keyboardRows.add(createRow("üè≥ –Ü–Ω—à–∏–π... (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É)"));

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –∫–Ω–æ–ø–æ–∫
    private KeyboardRow createRow(String... buttons) {
        KeyboardRow row = new KeyboardRow();
        for (String button : buttons) {
            row.add(new KeyboardButton(button));
        }
        return row;
    }


    private String getUserTimezone(long chatId) {
        String query = "SELECT timezone FROM users WHERE chatid = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setLong(1, chatId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getString("timezone");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "Europe/Warsaw"; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    }
    //–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä—è–¥–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    public static String formatTimezone(String input) {
        if (input == null || !input.contains("/")) {
            return input; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω, —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
        }

        String[] parts = input.split("/");

        if (parts.length != 2) {
            return input; // –Ø–∫—â–æ –Ω–µ –¥–≤–∞ —Å–ª–æ–≤–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
        }

        return capitalizeFirst(parts[0]) + "/" + capitalizeFirst(parts[1]);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ —Å–ª–æ–≤–∞
    private static String capitalizeFirst(String word) {
        if (word.isEmpty()) {
            return word;
        }
        return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();
    }


    private String getUserNameFromDatabase(long chatId) {
        String query = "SELECT username FROM users WHERE chatid = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setLong(1, chatId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getString("username");
            }
        } catch (SQLException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ SQL: {}", e.getMessage(), e);
        }
        return null;
    }




    private boolean isValidState(State expectedState) {
        return currentState == expectedState;
    }



    private void showReminders(long chatId) {
        String sql = "SELECT reminder_hour, reminder_minute,timezone FROM users WHERE chatid = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, chatId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                int hour = rs.getInt("reminder_hour");
                int minute = rs.getInt("reminder_minute");
                String timezone= rs.getString("timezone");

                sendMessage(chatId, "üîî –í–∞—à–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *" + formatTime(hour, minute) + "* (—á–∞—Å–æ–≤–∏–π –ø–æ—è—Å: " + timezone + ").");
            } else {
                sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–± –Ω–µ –∑–∞–±—É–≤–∞—Ç–∏ –≤–Ω–æ—Å–∏—Ç–∏ –¥–∞–Ω—ñ ‚è∞.");
            }
        } catch (SQLException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {}", e.getMessage(), e);
        }
    }

    private String formatTime(int hour, int minute) {
        return String.format("%02d:%02d", hour, minute);
    }


    @Override
    public String getBotUsername() {
        return System.getenv("BOT_USERNAME"); // –ß–∏—Ç–∞—î–º–æ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN"); // –ß–∏—Ç–∞—î–º–æ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    }
}
